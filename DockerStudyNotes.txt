Service Fabric
--------------
Questions
---------
What is the advantage of running a cluster with docker running? What does this mean - The reason to have Docker running when you create the cluster is so that the cluster is created with container features enabled. If Docker is not running, you will have to recreate the cluster to enable container features. 
Reference link - https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-quickstart-dotnet

Docker
------
Some findings
-------------
1. When trying to build a docker image, If you create a dockerfile using notepad then you will not be able to build the image as it will throw error as dockerfile not found. Reason being notepad appends .txt to the dockerfile therefore docker daemon is not able to find the file.
2. I couldn't build a dockerfile with "FROM scratch" (and an executable created with windows binary) with windows container in docker desktop. It throws error Linux container is not supported. Reason being (I guess), docker desktop actually runs a linux VM to run docker on windows.
3. If you want to run locally a postgres server by running a docker container then map the port of the container to a different port of the host. Then connect to the docker postgres in pgAdmin using localhost and the different port. Below is the docker command 
docker run -p 5434:5432 --rm --name mypostgres -e POSTGRES_PASSWORD=letshope_86 -d postgres:11
4. If you want to mount a local folder as a data storage for the postgres database running on container in Windows you may not be able to do this. Please refer to these links. https://github.com/docker/for-win/issues/445 , https://github.com/cytopia/devilbox/issues/175
The solution is to create a docker volume and mount it as data for the docker postgres database container. Here we have created a docker volume data-postgresql and mapped it to the container postgres default data folder which is /var/lib/postgresql/data
docker run -p 5434:5432 -v data-postgresql:/var/lib/postgresql/data --rm --name mypostgres -e POSTGRES_PASSWORD=letshope_86 -d postgres:11
5. We can't use --network=host in docker windows. It is not supported.
6. Get ip address of an container - docker inspect --format "{{ .NetworkSettings.IPAddress }}" {container id or name}
7. Check if container is linked to any other container -  docker inspect -f "{{ .HostConfig.Links }}" {container id or name}
8. Check what network(s) your container is on - docker inspect {container id or name} -f "{{json .NetworkSettings.Networks }}"
9. Run docker image interactively - 
	Run the docker container first using command - docker run -d -p 5000:80 --rm --name anotherdemo anotherdemo
	Then use docker exec command - docker exec -it anotherdemo /bin/bash
	Please note that you can open bin/bash session even if in dockerfile you have only application dll as entrypoint and no other command specified
	Kubernetes login to pod interactively - kubectl exec -it podname -- /bin/bash
10. Run local docker image in kubernetes - Set the imagePullPolicy to Never in deployment.yaml

Some issues
-----------
1. Created a dotnet core console application in VS code and wrote dockerfile. Also added another dockerfile using VS code command palette (Docker: Add Docker Files to Workspace). When I ran docker build in terminal using dockerfile I wrote it was built successfully. But when I ran docker build using the autogenerated dockerfile in the terminal it threw a COPY command command error telling path not found. However, when I tried to do a docker build from vs code command palette using command Docker Images: Build Image, the autogenerated dockerfile by vs code built successfully but the dockerfile written by me threw error.
2. Web application in a container and accessing local postgres - Could not do using adding host through docker command. We can connect docker container to host using special DNS name host.docker.internal 
	https://docs.docker.com/docker-for-windows/networking/
	https://gist.github.com/MauricioMoraes/87d76577babd4e084cba70f63c04b07d 
	docker run -d -p 5000:80 --rm --add-host=database:192.168.1.24 --name satyawebapp1 satyawebapp1 - This will not work
3. Run a docker image in interactive mode and run the same image in kubernetes and try to login to pod interactively

Base image
----------
Following has to be tried using linux container as "scratch" (no-opearting system image) will not work for windows container. Create a base image using "FROM scratch" and push a command to it like hello-world using
	1) c++ (https://linuxhint.com/create_docker_image_from_scratch/ - linux)
	2) .netcore (https://dotnetcoretutorials.com/2019/06/20/publishing-a-single-exe-file-in-net-core-3-0/)
	(dotnet publish -r win-x64 -c Release /p:PublishSingleFile=true) (windows - win-x64, linux - linux-x64)

Try outs
--------
1. Docker 
	a) Create a console application and put the code in the container and then build and publish
		Dotnet core docker base images - https://hub.docker.com/_/microsoft-dotnet-core
	b) Create a console application and pass value from docker run to the container to print
 	c) Create a web application and put the code in the container and then build and publish
		https://docs.microsoft.com/en-us/virtualization/windowscontainers/quick-start/building-sample-app
		docker build -t satyawebapp1 .
		docker run -d -p 5000:80 --rm --name satyawebapp1 satyawebapp1
	d) Check for the web application how to declare environment variable and how port mapping can be done in the docker file so that in the run command of docker image of web application we will not the need of port mapping.
	e) Web application in a container and accessing local postgres - Can be connected using special DNS name host.docker.internal in host in appsetting postgres connection string
	"DefaultConnection": "Host=host.docker.internal;Port=5432;Username=postgres;Password=RtAhL8j9946W;Database=Tryout;"
	https://gist.github.com/MauricioMoraes/87d76577babd4e084cba70f63c04b07d 
	docker run -d -p 5000:80 --rm --add-host=database:192.168.1.24 --name satyawebapp1 satyawebapp1 - This will not work
 	d) Database on a container and connect to it from another web application in a container
	https://hahoangv.wordpress.com/2016/08/05/docker-for-net-developers-net-core-ef-core-and-postresql-in-docker/ - In this link only to refer to the section where we are linking two containers
	docker run -d -p 5000:80 --link mypostgres:postgres --rm --name satyawebapp1 satyawebapp1
	Important - In appsettings of web application the connection string of postgres database should have port 5432. This is the internal port postgres running on container.
 	e) Two applications on two containers and interaction between them
	Created a console application callerconsole to call satyawebapp1. Need to find out
		1) Linking satyawebapp1 while running callerconsole docker run --rm --name callerconsole callerconsole
		2) Use the linked satyawebapp1 in appsetting.json "webApiUrl" setting of callerconsole
	f) Use of docker network instead of legacy docker links
		1) Use default bridge to connect web and postgres db - Can be done by using the db container IP address in the host in the postgres connection string in appsettings. e.g. 
			"ConnectionStrings": {
				"DefaultConnection": "Host=172.17.0.2;Port=5432;Username=postgres;Password=letshope_86;Database=Tryout;"
			}
		2) Use default bridge to connect console app and web - Can be done by using the web container IP address in the appsettings of consoleapp. e.g. 
			{
				"webApiUrl":"http://172.17.0.3:80/"
			}
		3) Use user defined bridge to connect web and db - we can use the container name itself for "host" in postgres connection string in appsettings of webapp. e.g. 
			"ConnectionStrings": {
				"DefaultConnection": "Host=mypostgres;Port=5432;Username=postgres;Password=letshope_86;Database=Tryout;"
			}
			But using container name in connection string will not work if we don't connect the containers to a user defined network. When we ran the containers in default docker bridge (not using --network=satya-bridge-network) error was thrown when trying to use container name in connection string.
			i) Created a network - docker network create -d bridge satya-bridge-network
			ii) Ran web and db and connected to the above new network created
				docker run -p 5434:5432 -v data-postgresql:/var/lib/postgresql/data --rm --network=satya-bridge-network --network-alias=["postgres","db"] --name mypostgres -e POSTGRES_PASSWORD=letshope_86 -d postgres:11
				docker run -d -p 5000:80 --rm --network=satya-bridge-network --network-alias=["satyawebapp1"] --name satyawebapp1 satyawebapp1
			iii) Using network-alias in connection string didn't work, but using container name worked.
		4) Use user defined bridge to connect console app and web - Run the console container using the same network and Use the webapp container name in appsetting of console. It will work.
		docker run --rm --network=satya-bridge-network --network-alias=["callerconsole"] --name callerconsole callerconsole
		{
			"webApiHost":"http://satyawebapp1:80/"
		}
	g) Deploy to local Kubenetes cluster available in Docker Desktop - 
		About Kubernetes & Docker
			https://www.educative.io/blog/docker-kubernetes-beginners-guide
	
	h) Use docker-compose
	https://medium.com/front-end-weekly/net-core-web-api-with-docker-compose-postgresql-and-ef-core-21f47351224f
	i) Deploy dockerized local application to Azure using Devops and configure CI/CD
	
2. Kubernetes
	a) Deploy web application to local cluster and access from outside
	b) Deploy web application with database to cluster, configure configMaps and secrets to store db connection string, username, password
	
	Extras
	a) In Docker Desktop, using linux container, create a docker image to run a dotnet core application
	b) Create a docker image where we can use the command prompt of the image and check directory structure by running the container in interactive mode and also understand docker command COPY . ./ or COPY . . etc
		https://www.michaelcrump.net/part5-docker/
	c) In VS Code how can I select a different launch.json than the default one opening when I click on Open launch.json in run
	d) Try docker build from VS Code command palette then debug container in vs code
		https://code.visualstudio.com/docs/containers/quickstart-aspnet-core
		https://code.visualstudio.com/docs/containers/debug-netcore
		https://www.aaron-powell.com/posts/2019-04-04-debugging-dotnet-in-docker-with-vscode/
	e) Understand more on Docker volume
	f) Web application and postgres or any db in the same container - Not sure if we can do it. Need to check. Also need to check how we can build a docker image(writing a dockerfile) which will install postgres on a container rather than having the already provided image just having postgres
	
commands
--------
Docker
------
docker build -t imagename .
docker build -f {Dockerfile path} -t {Image tag} .
docker run -d -p 5000:80 --rm --name containername imagetagname
docker stop containername
docker container ls
docker images or docker image ls
docker image rm imagename

docker image tag dockerdemo:latest satyajit1986/myimages:dockerdemo
docker push satyajit1986/myimages:dockerdemo


docker exec -it containerID /bin/bash

docker container ls --no-trunc

Kubernetes
----------
check current context - kubectl config current-context
list all context - kubectl config get-contexts
change context name - kubectl config use-context {ContextName}
Apply yaml configuration files - kubectl apply -f {FileName} 
